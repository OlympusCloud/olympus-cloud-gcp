# Production Dockerfile for Rust services
# Multi-stage build for optimal size and security

# Stage 1: Build environment
FROM rust:1.75-slim AS builder

# Install dependencies
RUN apt-get update && apt-get install -y \
    pkg-config \
    libssl-dev \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app

# Copy workspace files
COPY Cargo.toml Cargo.lock ./
COPY auth/Cargo.toml auth/
COPY platform/Cargo.toml platform/
COPY commerce/Cargo.toml commerce/
COPY shared/Cargo.toml shared/

# Create dummy source files for dependency caching
RUN mkdir -p auth/src platform/src commerce/src shared/src && \
    echo "fn main() {}" > auth/src/main.rs && \
    echo "fn main() {}" > platform/src/main.rs && \
    echo "fn main() {}" > commerce/src/main.rs && \
    echo "fn main() {}" > shared/src/lib.rs

# Build dependencies
RUN cargo build --release

# Copy actual source code
COPY . .

# Touch source files to ensure rebuild
RUN touch auth/src/main.rs platform/src/main.rs commerce/src/main.rs shared/src/lib.rs

# Build release binaries
RUN cargo build --release

# Stage 2: Runtime environment
FROM debian:bookworm-slim

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    ca-certificates \
    libssl3 \
    && rm -rf /var/lib/apt/lists/*

# Create non-root user
RUN useradd -m -u 1000 -s /bin/bash olympus

# Copy binaries from builder
COPY --from=builder /app/target/release/olympus-server /usr/local/bin/

# Copy migrations
COPY --from=builder /app/migrations /app/migrations

# Set ownership
RUN chown -R olympus:olympus /app

# Switch to non-root user
USER olympus

# Set environment variables
ENV RUST_LOG=info
ENV DATABASE_URL=""
ENV REDIS_URL=""
ENV JWT_SECRET=""
ENV PORT=8080

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:${PORT}/health || exit 1

# Expose port
EXPOSE 8080

# Run the server
CMD ["olympus-server"]