from __future__ import annotations

from datetime import datetime
from typing import List, Optional
from uuid import UUID

from pydantic import BaseModel, Field


class RetailChannelPerformance(BaseModel):
    channel: str = Field(..., description="Sales channel identifier (e.g., online, in_store)")
    revenue: float = Field(..., description="Total revenue generated by the channel")
    orders: int = Field(..., description="Number of orders fulfilled through the channel")
    growth_rate: float = Field(..., description="Week-over-week revenue growth rate as a decimal")
    average_order_value: float = Field(..., description="Average order value for the channel")


class RetailProductPerformance(BaseModel):
    product_id: str
    name: str
    category: Optional[str] = None
    revenue: float
    units_sold: int
    stock_on_hand: int
    sell_through_rate: float = Field(..., ge=0.0, le=1.0)
    gross_margin: float


class RetailPromotionPerformance(BaseModel):
    promotion_id: str
    name: str
    type: str
    status: str
    revenue: float
    uplift: float = Field(..., description="Revenue uplift attributed to the promotion")


class RetailStockAlert(BaseModel):
    product_id: str
    sku: Optional[str] = None
    product_name: str
    status: str
    current_stock: int
    threshold: int
    days_of_cover: float


class RetailAnalytics(BaseModel):
    tenant_id: UUID
    location_id: Optional[UUID] = None
    date: datetime
    total_revenue: float
    average_order_value: float
    total_orders: int
    unique_customers: int
    repeat_purchase_rate: float = Field(..., ge=0.0, le=1.0)
    inventory_turnover: float
    sell_through_rate: float = Field(..., ge=0.0, le=1.0)
    gross_margin_rate: float
    customer_conversion_rate: float = Field(..., ge=0.0, le=1.0)
    barcode_scans: int
    top_products: List[RetailProductPerformance] = Field(default_factory=list)
    channel_performance: List[RetailChannelPerformance] = Field(default_factory=list)
    promotion_performance: List[RetailPromotionPerformance] = Field(default_factory=list)
    stock_alerts: List[RetailStockAlert] = Field(default_factory=list)


class RetailRecommendation(BaseModel):
    type: str
    title: str
    description: str
    impact: str
    priority: int
    data: dict = Field(default_factory=dict)
